//product controller

const Product = require("../models/ProductModel");
const User = require("../models/UsersModel");


const fs = require("fs");
const path = require("path");
const multer = require("multer");
const { Shop, Seller } = require("../models/seller");

//getting the directory outside controller
const dirnamearr = __dirname.split(`\\`);
const dirname = dirnamearr.splice(0, dirnamearr.length - 1).join("/");

//setting up multer diskStorage method
const storage = multer.diskStorage({
  destination: `${dirname}/tmp/uploads`,
  filename: (req, file, cb) => {
    cb(null, file.fieldname + Date.now() + ".jpg");
  },
});

const upload = multer({
  storage: storage,
  limits: {
    fieldNameSize: 300,
    fileSize: 5048579, // 5Mb
  },
}).array('images',5);

// handle GET request at /api/product to get list of all products in stock
exports.allProducts = (req, res) => {
  let page = req.query.page || 1;
  let perPage = parseInt(req.query.perPage) || 8;

  Product.paginate(
    { numberInStock: { $ne: 0 } },
    { sort: { creationDate: -1 }, page: page, limit: perPage },
    (err, result) => {
      if (err) {
        console.log(err);
        res.status(400).json({ message: "Couldn't find products" });
      } else {
        res.status(200).json({ products: result.docs, pagesCount: result.pages });
      }
    }
  );
};

// handle GET request at /api/product/my_products to get list of all products
// paginate is a mongoose external plugin to handle pagination
exports.userProducts = (req, res) => {
  let page = req.query.page || 1;
  let perPage = req?.query?.perPage ? parseInt(req.query.perPage) : 20

  // if the user is admin, let him fetch all the products
  // if (req.user.isAdmin) {
  //   Product.paginate(
  //     {},
  //     { sort: { creationDate: -1 }, populate: "seller", page: page, limit: perPage },
  //     (err, result) => {
  //       if (err) {
  //         res.status(400).json({ message: "Couldn't find products" });
  //       } else {
  //         res.status(200).json({ products: result.docs, pagesCount: result.pages });
  //       }
  //     }
  //   );
  // } else {
    // if the user isn't admin then he will just be able to edit his products
    Product.paginate(
      { seller: req.seller.id },
      { sort: { creationDate: -1 }, populate: "seller", page: page, limit: perPage },
      (err, result) => {
        if (err) {
          console.log(err)
          res.status(400).json({ message: "Couldn't find products",err });
        } else {
          res
            .status(200)
            .json({ products: result.docs, current: result.page, pages: result.pages });
        }
      }
    );
  // }
};

// handle POST request at /api/product/create to create a new product
// will pass an array of functions as a middleware
exports.createProduct = (req, res) => {
  console.log(path.basename(__dirname));
  upload(req, res, async (err) => {
    console.log(req.files,'body',req.body);
    if (req.body&& req.files) {
      if (err) {
        res.status(401).json({ message: "fields are not correctly filled", err });
      }else {
        const productImages = req.files.map((file) =>
          path.join(dirname + "/tmp/uploads/" + file.filename)
        );
          const {variants,dimensions,brand,otherBrands,specifications,...others} = req.body
          // console.log()
        const product = new Product({
          ...others,
          seller: req.seller.id,
          variants:JSON.parse(variants),
          specifications:JSON.parse(specifications),
          dimensions:JSON.parse(dimensions),
          brand:otherBrands||brand,
          productImage: productImages,
        });
        try {
          await product.save();
          Shop.findOneAndUpdate({seller:req.seller.id},{
            $push:{products:product._id}
          })
          res.status(201).json({ message: "product created successfully" });
        } catch (error) {
          console.log(error)
          res.status(500).json({ message: "product creation is not successful", error: error });
        }
      }
    } else {
      res.status(400).json({ message: "request body cannot be empty" });
    }
  });
};

// handle GET request at /api/product/:id to get details for a specific product
exports.productDetails = (req, res) => {
  Product.findById(req.params.id)
    .populate("category")
    .populate("seller")
    .exec(function (err, result) {
      if (err) {
        res.status(404).json({ message: "Not Found" });
      } else {
        res.json(result);
      }
    });
};


// handle GET request at /api/product/filter/ to get details for a specific product

exports.filterProducts = async (req, res) => {
  try {
    const {
      name,
      field,
      brand,
      category,
      sort,
      minPrice,
      maxPrice,
      minRating,
      maxRating,
      numericFilters,
    } = req.query;

    // Query Objects
    const queryObjects = {};
    if (name) {
      queryObjects.name = { $regex: name, $options: "i" };
    }
    if (numericFilters) {
      const operatorMap = {
        ">": "$gt",
        ">=": "$gte",
        "=": "$eq",
        "<=": "$lte",
        "<": "$lt",
      };
      const regEx = /\b(<|>|>=|=|<=)\b/g;
      let filters = numericFilters.replace(regEx, (match) => `-${operatorMap[match]}-`);
      const options = ["price", "rating"];
      filters = filters.split(",").forEach((item) => {
        const [field, operator, value] = item.split("-");
        if (options.includes(field)) {
          queryObjects[field] = { [operator]: Number(value) };
        }
      });
    }
    if (category) {
      queryObjects.category = { $regex: category, $options: "i" };
    }
    if (brand) {
      queryObjects.brand = { $regex: brand, $options: "i" };
    }
    if (minPrice || maxPrice) {
      queryObjects.price = {
        $gte: Number(minPrice) || 0,
        $lte: Number(maxPrice) || 99999999999,
      };
    }
    if (minRating || maxRating) {
      queryObjects.rating = {
        $gte: Number(minRating) || 0,
        $lte: Number(maxRating) || 5,
      };
    }

    let result = Product.find(queryObjects);

    // Sorting Result
    if (sort) {
      const sortList = sort.split(",").map((s) => {
        const [field, order] = s.split(":");
        return [field, order === "desc" ? -1 : 1];
      });
      result = result.sort(sortList);
    } else {
      result = result.sort("rating");
    }

    // Show Specific Fields
    if (field) {
      const fieldList = field.split(",").join(" ");
      result = result.select(fieldList);
    }

    const page = Number(req.query.page);
    const limit = Number(req.query.limit);
    const skip = (page - 1) * limit;

    result = result.skip(skip).limit(limit);
    const products = await result;

    res.status(200).send({ data: products, message: "success: products found" });
  } catch (error) {
    res.status(500).json({ message: "something went wrong please try again", error });
  }
};



// handle DELETE request at /api/product/delete/:id/ to delete an item by its id
exports.deleteProduct = async (req, res) => {
  try {
    const product  = await Product.findById(req.params.id)
    if (!product) {
      res.status(400).json({ message: "Couldn't delete, try again" });
    } else {
      if (product.seller == req.seller.id) {
        const deletedProduct = await Product.findByIdAndDelete(req.params.id)

        res.status(200).json({ message: "Deleted Successfully" , deletedProduct});
        
      }
      else{
        res.status(401).json({ message: "invalid seller id" });

      }
    }
  } catch (error) {
    res.status(500).json({ message: "something went wrong",error });
    console.log(error)
  }
};

// handle POST request at /api/product/:id/update to update an item
exports.updateProduct = (req, res) => {
  const images_url = req.files.map(image => image.path);

  // find one product in the database to get the same images
  //if the user won't update the images
  Product.findById(req.params.id, "productImage")
    .then(product => {
      // create updated product with the provided data
      let updatedProduct = {
        name: req.body.name,
        description: req.body.description,
        category: req.body.category,
        price: req.body.price,
        numberInStock: req.body.numberInStock,
        productImage: req.files[0] ? images_url : product.productImage
      };  

      // update with the new data
      Product.findByIdAndUpdate(req.params.id, updatedProduct, {
        new: true,
        useFindAndModify: false
      })
        .then(product => {
          res.status(200).json({
            message: "Successfuly Updated",
            product
          });
        })
        .catch(() => res.json(400).json({ message: "Error updating" }));
    })
    .catch(err => res.json(err));
};